// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FccAbstractCore
@_exported import FccAbstractCore
import Flutter
import Foundation
import Swift
import UIKit
@objc public class FccData : ObjectiveC.NSObject, FccAbstractCore.AbstractFccData {
  public var nativeHandler: FccAbstractCore.NativeHandler
  public var controller: UIKit.UIViewController
  @objc public init(nativeHandler: FccAbstractCore.NativeHandler, controller: UIKit.UIViewController)
  @objc override dynamic public init()
  @objc deinit
}
public protocol AbstractUIViewController {
  func displayUI(parcel: FccAbstractCore.Parcel)
  func buildUI(parcel: FccAbstractCore.Parcel)
  func createPrivateChannel(parcel: FccAbstractCore.Parcel)
  func hideUI()
  func showTransactionApprovedScreen()
  func showTransactionDeclinedScreen()
}
@_inheritsConvenienceInitializers @objc public class FlutterEngineDependency : ObjectiveC.NSObject {
  public var flutterEngineId: Swift.String
  public var secureChannelName: Swift.String
  @objc override dynamic public init()
  @objc convenience public init(flutterEngineId: Swift.String, secureChannelName: Swift.String)
  @objc deinit
}
public protocol Channel {
  associatedtype CT
  var channel: Self.CT { get }
  func flowThrough(receiver: FccAbstractCore.CrossPlatformUIReceivers, parcel: FccAbstractCore.Parcel?)
}
@_inheritsConvenienceInitializers @objc open class DisplayArtifact : ObjectiveC.NSObject, FccAbstractCore.Parcel {
  @objc override dynamic public init()
  @objc convenience public init(artifact: [Swift.UInt8])
  @objc public func pack() -> Any
  @objc deinit
}
public protocol Messenger {
  associatedtype C
  func send(reciever: FccAbstractCore.CrossPlatformUIReceivers, parcel: FccAbstractCore.Parcel?, channel: Self.C)
}
public class PrivateChannelData : FccAbstractCore.Parcel, Swift.Codable {
  @objc public func pack() -> Any
  public var channelName: Swift.String
  public init(channelName: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class TransactionRequest : ObjectiveC.NSObject, Swift.Codable, FccAbstractCore.Parcel {
  @objc override dynamic public init()
  @objc convenience public init(authType: Swift.Int, data: FccAbstractCore.AuthData)
  @objc public func pack() -> Any
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol NotificationHandler {
  func sendNotification(receiver: FccAbstractCore.CrossPlatformUIReceivers, parcel: FccAbstractCore.Parcel?)
  func registerNotificationReceiver(receiver: FccAbstractCore.NotificationReceiver)
}
@objc public protocol AbstractFlutterEngineDependency {
}
@objc public protocol AbstractFccData {
}
@objc public protocol Parcel {
  @objc func pack() -> Any
}
public enum CrossPlatformUIReceivers : Swift.String {
  case DISPLAY_UI
  case HIDE_UI
  case BUILD_UI
  case SHOW_TRANSACTION_APPROVED_SCREEN
  case SHOW_TRANSACTION_DECLINED_SCREEN
  case CREATE_PRIVATE_CHANNEL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NativeHandler {
  @objc func waterMarkScreen(bitmap: [Swift.UInt8])
  @objc func approveTransaction(data: Any?)
  @objc func declineTransaction()
  @objc func onScreenReady()
  @objc func detectOverlay()
  @objc func onBackButtonPressed()
  @objc func invalidMethodCall(methodName: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class AuthData : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc convenience public init(uiJsonProperties: Swift.String, useFallbackScreen: Swift.Bool)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public protocol FccApi {
  @objc func displayUI(parcel: FccAbstractCore.Parcel)
  @objc func buildUI(parcel: FccAbstractCore.Parcel)
  @objc func attachView(fccData: FccAbstractCore.FccData)
  @objc func prepare(flutterEngineDependency: FccAbstractCore.FlutterEngineDependency)
  @objc func hideUI()
  @objc func showTransactionApprovedScreen()
  @objc func showTransactionDeclinedScreen()
}
public protocol NotificationReceiver {
  func handleNotification(channel: Any)
}
extension FccAbstractCore.CrossPlatformUIReceivers : Swift.Equatable {}
extension FccAbstractCore.CrossPlatformUIReceivers : Swift.Hashable {}
extension FccAbstractCore.CrossPlatformUIReceivers : Swift.RawRepresentable {}
